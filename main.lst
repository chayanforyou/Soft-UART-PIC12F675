;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 11/5/2022 11:44:02 PM
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0x2901      	GOTO       257
_____DoICP:
;__Lib_System.c,6 :: 		
;__Lib_System.c,9 :: 		
0x0003	0x1283      	BCF        STATUS, 5
0x0004	0x0826      	MOVF       ___DoICPAddr+1, 0
0x0005	0x008A      	MOVWF      PCLATH
;__Lib_System.c,10 :: 		
0x0006	0x0825      	MOVF       ___DoICPAddr, 0
0x0007	0x0082      	MOVWF      PCL
;__Lib_System.c,12 :: 		
L_end_____DoICP:
0x0008	0x0008      	RETURN
; end of _____DoICP
_Div_16X16_U:
;__Lib_Math.c,215 :: 		
;__Lib_Math.c,222 :: 		
0x0009	0x1283      	BCF        STATUS, 5
;__Lib_Math.c,223 :: 		
0x000A	0x1303      	BCF        STATUS, 6
;__Lib_Math.c,224 :: 		
0x000B	0x01D8      	CLRF       R8
;__Lib_Math.c,225 :: 		
0x000C	0x01D9      	CLRF       R9
;__Lib_Math.c,226 :: 		
0x000D	0x3010      	MOVLW      16
;__Lib_Math.c,227 :: 		
0x000E	0x00DC      	MOVWF      R12
;__Lib_Math.c,228 :: 		
0x000F	0x0D51      	RLF        R1, 0
;__Lib_Math.c,229 :: 		
0x0010	0x0DD8      	RLF        R8, 1
;__Lib_Math.c,230 :: 		
0x0011	0x0DD9      	RLF        R9, 1
;__Lib_Math.c,231 :: 		
0x0012	0x0854      	MOVF       R4, 0
;__Lib_Math.c,232 :: 		
0x0013	0x02D8      	SUBWF      R8, 1
;__Lib_Math.c,233 :: 		
0x0014	0x0855      	MOVF       R5, 0
;__Lib_Math.c,234 :: 		
0x0015	0x1C03      	BTFSS      STATUS, 0
;__Lib_Math.c,235 :: 		
0x0016	0x0F55      	INCFSZ     R5, 0
;__Lib_Math.c,236 :: 		
0x0017	0x02D9      	SUBWF      R9, 1
;__Lib_Math.c,237 :: 		
0x0018	0x1803      	BTFSC      STATUS, 0
;__Lib_Math.c,238 :: 		
0x0019	0x2821      	GOTO       $+8
;__Lib_Math.c,239 :: 		
0x001A	0x0854      	MOVF       R4, 0
;__Lib_Math.c,240 :: 		
0x001B	0x07D8      	ADDWF      R8, 1
;__Lib_Math.c,241 :: 		
0x001C	0x0855      	MOVF       R5, 0
;__Lib_Math.c,242 :: 		
0x001D	0x1803      	BTFSC      STATUS, 0
;__Lib_Math.c,243 :: 		
0x001E	0x0F55      	INCFSZ     R5, 0
;__Lib_Math.c,244 :: 		
0x001F	0x07D9      	ADDWF      R9, 1
;__Lib_Math.c,245 :: 		
0x0020	0x1003      	BCF        STATUS, 0
;__Lib_Math.c,246 :: 		
0x0021	0x0DD0      	RLF        R0, 1
;__Lib_Math.c,247 :: 		
0x0022	0x0DD1      	RLF        R1, 1
;__Lib_Math.c,248 :: 		
0x0023	0x0BDC      	DECFSZ     R12, 1
;__Lib_Math.c,249 :: 		
0x0024	0x280F      	GOTO       $-21
;__Lib_Math.c,251 :: 		
L_end_Div_16X16_U:
0x0025	0x0008      	RETURN
; end of _Div_16X16_U
_Soft_UART_Read:
;Soft_Uart.c,63 :: 		unsigned char Soft_UART_Read()
;Soft_Uart.c,66 :: 		char Data = 0;
0x0026	0x1283      	BCF        STATUS, 5
0x0027	0x01BE      	CLRF       Soft_UART_Read_Data_L0
;Soft_Uart.c,68 :: 		while (Soft_Uart_Rx == 1);            // Wait for start bit
L_Soft_UART_Read13:
0x0028	0x1C85      	BTFSS      Soft_Uart_Rx, BitPos(Soft_Uart_Rx+0)
0x0029	0x282B      	GOTO       L_Soft_UART_Read14
0x002A	0x2828      	GOTO       L_Soft_UART_Read13
L_Soft_UART_Read14:
;Soft_Uart.c,69 :: 		delay_us(HALFBITPERIOD);
0x002B	0x3011      	MOVLW      17
0x002C	0x00DD      	MOVWF      R13
L_Soft_UART_Read15:
0x002D	0x0BDD      	DECFSZ     R13, 1
0x002E	0x282D      	GOTO       L_Soft_UART_Read15
;Soft_Uart.c,70 :: 		for (mask = 0x01; mask != 0; mask = mask << 1)
0x002F	0x3001      	MOVLW      1
0x0030	0x00D1      	MOVWF      R1
L_Soft_UART_Read16:
0x0031	0x0851      	MOVF       R1, 0
0x0032	0x3A00      	XORLW      0
0x0033	0x1903      	BTFSC      STATUS, 2
0x0034	0x2840      	GOTO       L_Soft_UART_Read17
;Soft_Uart.c,72 :: 		delay_us(BITPERIOD_FOR_READ);       // Delay to read
0x0035	0x301F      	MOVLW      31
0x0036	0x00DD      	MOVWF      R13
L_Soft_UART_Read19:
0x0037	0x0BDD      	DECFSZ     R13, 1
0x0038	0x2837      	GOTO       L_Soft_UART_Read19
;Soft_Uart.c,73 :: 		if (Soft_Uart_Rx) Data = Data | mask;
0x0039	0x1C85      	BTFSS      Soft_Uart_Rx, BitPos(Soft_Uart_Rx+0)
0x003A	0x283D      	GOTO       L_Soft_UART_Read20
0x003B	0x0851      	MOVF       R1, 0
0x003C	0x04BE      	IORWF      Soft_UART_Read_Data_L0, 1
L_Soft_UART_Read20:
;Soft_Uart.c,70 :: 		for (mask = 0x01; mask != 0; mask = mask << 1)
0x003D	0x0DD1      	RLF        R1, 1
0x003E	0x1051      	BCF        R1, 0
;Soft_Uart.c,74 :: 		}
0x003F	0x2831      	GOTO       L_Soft_UART_Read16
L_Soft_UART_Read17:
;Soft_Uart.c,75 :: 		Delay_us(BITPERIOD);
0x0040	0x3022      	MOVLW      34
0x0041	0x00DD      	MOVWF      R13
L_Soft_UART_Read21:
0x0042	0x0BDD      	DECFSZ     R13, 1
0x0043	0x2842      	GOTO       L_Soft_UART_Read21
0x0044	0x0000      	NOP
;Soft_Uart.c,76 :: 		return Data;
0x0045	0x083E      	MOVF       Soft_UART_Read_Data_L0, 0
0x0046	0x00D0      	MOVWF      R0
;Soft_Uart.c,77 :: 		}
L_end_Soft_UART_Read:
0x0047	0x0008      	RETURN
; end of _Soft_UART_Read
_Soft_UART_Write:
;Soft_Uart.c,33 :: 		void Soft_UART_Write(unsigned char Data)
;Soft_Uart.c,36 :: 		Soft_Uart_Tx = 0;
0x0048	0x1283      	BCF        STATUS, 5
0x0049	0x1005      	BCF        Soft_Uart_Tx, BitPos(Soft_Uart_Tx+0)
;Soft_Uart.c,37 :: 		delay_us(BITPERIOD);
0x004A	0x3022      	MOVLW      34
0x004B	0x00DD      	MOVWF      R13
L_Soft_UART_Write1:
0x004C	0x0BDD      	DECFSZ     R13, 1
0x004D	0x284C      	GOTO       L_Soft_UART_Write1
0x004E	0x0000      	NOP
;Soft_Uart.c,40 :: 		for (mask = 0x01; mask != 0; mask = mask << 1)
0x004F	0x3001      	MOVLW      1
0x0050	0x00D1      	MOVWF      R1
L_Soft_UART_Write2:
0x0051	0x0851      	MOVF       R1, 0
0x0052	0x3A00      	XORLW      0
0x0053	0x1903      	BTFSC      STATUS, 2
0x0054	0x2866      	GOTO       L_Soft_UART_Write3
;Soft_Uart.c,42 :: 		if (Data & mask) Soft_Uart_Tx = 1;
0x0055	0x0851      	MOVF       R1, 0
0x0056	0x053E      	ANDWF      FARG_Soft_UART_Write_Data, 0
0x0057	0x00D0      	MOVWF      R0
0x0058	0x1903      	BTFSC      STATUS, 2
0x0059	0x285C      	GOTO       L_Soft_UART_Write5
0x005A	0x1405      	BSF        Soft_Uart_Tx, BitPos(Soft_Uart_Tx+0)
0x005B	0x285D      	GOTO       L_Soft_UART_Write6
L_Soft_UART_Write5:
;Soft_Uart.c,43 :: 		else Soft_Uart_Tx = 0;
0x005C	0x1005      	BCF        Soft_Uart_Tx, BitPos(Soft_Uart_Tx+0)
L_Soft_UART_Write6:
;Soft_Uart.c,44 :: 		delay_us(BITPERIOD_FOR_WRITE);      // For greater precision according to the crystal because it is 14 clock cycles
0x005D	0x301D      	MOVLW      29
0x005E	0x00DD      	MOVWF      R13
L_Soft_UART_Write7:
0x005F	0x0BDD      	DECFSZ     R13, 1
0x0060	0x285F      	GOTO       L_Soft_UART_Write7
0x0061	0x0000      	NOP
0x0062	0x0000      	NOP
;Soft_Uart.c,40 :: 		for (mask = 0x01; mask != 0; mask = mask << 1)
0x0063	0x0DD1      	RLF        R1, 1
0x0064	0x1051      	BCF        R1, 0
;Soft_Uart.c,45 :: 		}
0x0065	0x2851      	GOTO       L_Soft_UART_Write2
L_Soft_UART_Write3:
;Soft_Uart.c,46 :: 		Soft_Uart_Tx = 1;
0x0066	0x1405      	BSF        Soft_Uart_Tx, BitPos(Soft_Uart_Tx+0)
;Soft_Uart.c,47 :: 		delay_us(BITPERIOD);
0x0067	0x3022      	MOVLW      34
0x0068	0x00DD      	MOVWF      R13
L_Soft_UART_Write8:
0x0069	0x0BDD      	DECFSZ     R13, 1
0x006A	0x2869      	GOTO       L_Soft_UART_Write8
0x006B	0x0000      	NOP
;Soft_Uart.c,48 :: 		}
L_end_Soft_UART_Write:
0x006C	0x0008      	RETURN
; end of _Soft_UART_Write
_Soft_UART_Write_Text_Const:
;Soft_Uart.c,57 :: 		void Soft_UART_Write_Text_Const(const char* Text)
;Soft_Uart.c,59 :: 		while (*Text)Soft_UART_Write(*Text++);
L_Soft_UART_Write_Text_Const11:
0x006D	0x1283      	BCF        STATUS, 5
0x006E	0x0839      	MOVF       FARG_Soft_UART_Write_Text_Const_Text, 0
0x006F	0x00A5      	MOVWF      ___DoICPAddr
0x0070	0x083A      	MOVF       FARG_Soft_UART_Write_Text_Const_Text+1, 0
0x0071	0x00A6      	MOVWF      ___DoICPAddr+1
0x0072	0x2003      	CALL       _____DoICP
0x0073	0x118A      	BCF        PCLATH, 3
0x0074	0x120A      	BCF        PCLATH, 4
0x0075	0x00D0      	MOVWF      R0
0x0076	0x0850      	MOVF       R0, 0
0x0077	0x1903      	BTFSC      STATUS, 2
0x0078	0x2886      	GOTO       L_Soft_UART_Write_Text_Const12
0x0079	0x0839      	MOVF       FARG_Soft_UART_Write_Text_Const_Text, 0
0x007A	0x00A5      	MOVWF      ___DoICPAddr
0x007B	0x083A      	MOVF       FARG_Soft_UART_Write_Text_Const_Text+1, 0
0x007C	0x00A6      	MOVWF      ___DoICPAddr+1
0x007D	0x2003      	CALL       _____DoICP
0x007E	0x118A      	BCF        PCLATH, 3
0x007F	0x120A      	BCF        PCLATH, 4
0x0080	0x00BE      	MOVWF      FARG_Soft_UART_Write_Data
0x0081	0x2048      	CALL       _Soft_UART_Write
0x0082	0x0AB9      	INCF       FARG_Soft_UART_Write_Text_Const_Text, 1
0x0083	0x1903      	BTFSC      STATUS, 2
0x0084	0x0ABA      	INCF       FARG_Soft_UART_Write_Text_Const_Text+1, 1
0x0085	0x286D      	GOTO       L_Soft_UART_Write_Text_Const11
L_Soft_UART_Write_Text_Const12:
;Soft_Uart.c,60 :: 		}
L_end_Soft_UART_Write_Text_Const:
0x0086	0x0008      	RETURN
; end of _Soft_UART_Write_Text_Const
_WordToStr:
;__Lib_Conversions.c,98 :: 		
;__Lib_Conversions.c,103 :: 		
0x0087	0x1283      	BCF        STATUS, 5
0x0088	0x01BC      	CLRF       WordToStr_len_L0
L_WordToStr11:
0x0089	0x3005      	MOVLW      5
0x008A	0x023C      	SUBWF      WordToStr_len_L0, 0
0x008B	0x1803      	BTFSC      STATUS, 0
0x008C	0x2894      	GOTO       L_WordToStr12
;__Lib_Conversions.c,104 :: 		
0x008D	0x083C      	MOVF       WordToStr_len_L0, 0
0x008E	0x073B      	ADDWF      FARG_WordToStr_output, 0
0x008F	0x0084      	MOVWF      FSR
0x0090	0x3020      	MOVLW      32
0x0091	0x0080      	MOVWF      INDF
;__Lib_Conversions.c,103 :: 		
0x0092	0x0ABC      	INCF       WordToStr_len_L0, 1
;__Lib_Conversions.c,104 :: 		
0x0093	0x2889      	GOTO       L_WordToStr11
L_WordToStr12:
;__Lib_Conversions.c,105 :: 		
0x0094	0x083C      	MOVF       WordToStr_len_L0, 0
0x0095	0x073B      	ADDWF      FARG_WordToStr_output, 0
0x0096	0x0084      	MOVWF      FSR
0x0097	0x0180      	CLRF       INDF
0x0098	0x03BC      	DECF       WordToStr_len_L0, 1
;__Lib_Conversions.c,107 :: 		
L_WordToStr14:
;__Lib_Conversions.c,108 :: 		
0x0099	0x083C      	MOVF       WordToStr_len_L0, 0
0x009A	0x073B      	ADDWF      FARG_WordToStr_output, 0
0x009B	0x00BD      	MOVWF      FLOC__WordToStr
0x009C	0x300A      	MOVLW      10
0x009D	0x00D4      	MOVWF      R4
0x009E	0x01D5      	CLRF       R4+1
0x009F	0x0839      	MOVF       FARG_WordToStr_input, 0
0x00A0	0x00D0      	MOVWF      R0
0x00A1	0x083A      	MOVF       FARG_WordToStr_input+1, 0
0x00A2	0x00D1      	MOVWF      R0+1
0x00A3	0x2009      	CALL       _Div_16X16_U
0x00A4	0x0858      	MOVF       R8, 0
0x00A5	0x00D0      	MOVWF      R0
0x00A6	0x0859      	MOVF       R8+1, 0
0x00A7	0x00D1      	MOVWF      R0+1
0x00A8	0x3030      	MOVLW      48
0x00A9	0x07D0      	ADDWF      R0, 1
0x00AA	0x083D      	MOVF       FLOC__WordToStr, 0
0x00AB	0x0084      	MOVWF      FSR
0x00AC	0x0850      	MOVF       R0, 0
0x00AD	0x0080      	MOVWF      INDF
;__Lib_Conversions.c,109 :: 		
0x00AE	0x300A      	MOVLW      10
0x00AF	0x00D4      	MOVWF      R4
0x00B0	0x01D5      	CLRF       R4+1
0x00B1	0x0839      	MOVF       FARG_WordToStr_input, 0
0x00B2	0x00D0      	MOVWF      R0
0x00B3	0x083A      	MOVF       FARG_WordToStr_input+1, 0
0x00B4	0x00D1      	MOVWF      R0+1
0x00B5	0x2009      	CALL       _Div_16X16_U
0x00B6	0x0850      	MOVF       R0, 0
0x00B7	0x00B9      	MOVWF      FARG_WordToStr_input
0x00B8	0x0851      	MOVF       R0+1, 0
0x00B9	0x00BA      	MOVWF      FARG_WordToStr_input+1
;__Lib_Conversions.c,110 :: 		
0x00BA	0x3000      	MOVLW      0
0x00BB	0x0651      	XORWF      R0+1, 0
0x00BC	0x1D03      	BTFSS      STATUS, 2
0x00BD	0x28C0      	GOTO       L__WordToStr379
0x00BE	0x3000      	MOVLW      0
0x00BF	0x0650      	XORWF      R0, 0
L__WordToStr379:
0x00C0	0x1D03      	BTFSS      STATUS, 2
0x00C1	0x28C3      	GOTO       L_WordToStr16
;__Lib_Conversions.c,111 :: 		
0x00C2	0x28C5      	GOTO       L_WordToStr15
L_WordToStr16:
;__Lib_Conversions.c,112 :: 		
0x00C3	0x03BC      	DECF       WordToStr_len_L0, 1
;__Lib_Conversions.c,113 :: 		
0x00C4	0x2899      	GOTO       L_WordToStr14
L_WordToStr15:
;__Lib_Conversions.c,114 :: 		
L_end_WordToStr:
0x00C5	0x0008      	RETURN
; end of _WordToStr
_SoftUart_Init:
;Soft_Uart.c,22 :: 		void  SoftUart_Init()
;Soft_Uart.c,24 :: 		Soft_Uart_Tx = 1;
0x00C6	0x1283      	BCF        STATUS, 5
0x00C7	0x1405      	BSF        Soft_Uart_Tx, BitPos(Soft_Uart_Tx+0)
;Soft_Uart.c,25 :: 		Soft_Uart_Rx = 1;
0x00C8	0x1485      	BSF        Soft_Uart_Rx, BitPos(Soft_Uart_Rx+0)
;Soft_Uart.c,26 :: 		Soft_Uart_Tx_Direction = 0;
0x00C9	0x1683      	BSF        STATUS, 5
0x00CA	0x1005      	BCF        Soft_Uart_Tx_Direction, BitPos(Soft_Uart_Tx_Direction+0)
;Soft_Uart.c,27 :: 		Soft_Uart_Rx_Direction = 1;
0x00CB	0x1485      	BSF        Soft_Uart_Rx_Direction, BitPos(Soft_Uart_Rx_Direction+0)
;Soft_Uart.c,28 :: 		Soft_Uart_Tx = 1;
0x00CC	0x1283      	BCF        STATUS, 5
0x00CD	0x1405      	BSF        Soft_Uart_Tx, BitPos(Soft_Uart_Tx+0)
;Soft_Uart.c,29 :: 		delay_us(BITPERIOD);
0x00CE	0x3022      	MOVLW      34
0x00CF	0x00DD      	MOVWF      R13
L_SoftUart_Init0:
0x00D0	0x0BDD      	DECFSZ     R13, 1
0x00D1	0x28D0      	GOTO       L_SoftUart_Init0
0x00D2	0x0000      	NOP
;Soft_Uart.c,30 :: 		}
L_end_SoftUart_Init:
0x00D3	0x0008      	RETURN
; end of _SoftUart_Init
_Soft_UART_Write_Text:
;Soft_Uart.c,51 :: 		void Soft_UART_Write_Text(char* Text)
;Soft_Uart.c,53 :: 		while (*Text)Soft_UART_Write(*Text++);
L_Soft_UART_Write_Text9:
0x00D4	0x1283      	BCF        STATUS, 5
0x00D5	0x0839      	MOVF       FARG_Soft_UART_Write_Text_Text, 0
0x00D6	0x0084      	MOVWF      FSR
0x00D7	0x0800      	MOVF       INDF, 0
0x00D8	0x1903      	BTFSC      STATUS, 2
0x00D9	0x28E1      	GOTO       L_Soft_UART_Write_Text10
0x00DA	0x0839      	MOVF       FARG_Soft_UART_Write_Text_Text, 0
0x00DB	0x0084      	MOVWF      FSR
0x00DC	0x0800      	MOVF       INDF, 0
0x00DD	0x00BE      	MOVWF      FARG_Soft_UART_Write_Data
0x00DE	0x2048      	CALL       _Soft_UART_Write
0x00DF	0x0AB9      	INCF       FARG_Soft_UART_Write_Text_Text, 1
0x00E0	0x28D4      	GOTO       L_Soft_UART_Write_Text9
L_Soft_UART_Write_Text10:
;Soft_Uart.c,54 :: 		}
L_end_Soft_UART_Write_Text:
0x00E1	0x0008      	RETURN
; end of _Soft_UART_Write_Text
_Soft_UART_Read_Text:
;Soft_Uart.c,79 :: 		void Soft_UART_Read_Text(char* Buffer, char StopChar)
;Soft_Uart.c,81 :: 		while (*(Buffer - 1) != StopChar)    // Wait until desired character does not arrive
L_Soft_UART_Read_Text22:
0x00E2	0x1283      	BCF        STATUS, 5
0x00E3	0x0339      	DECF       FARG_Soft_UART_Read_Text_Buffer, 0
0x00E4	0x0084      	MOVWF      FSR
0x00E5	0x0800      	MOVF       INDF, 0
0x00E6	0x063A      	XORWF      FARG_Soft_UART_Read_Text_StopChar, 0
0x00E7	0x1903      	BTFSC      STATUS, 2
0x00E8	0x28F0      	GOTO       L_Soft_UART_Read_Text23
;Soft_Uart.c,83 :: 		*Buffer++ = Soft_UART_Read();      // Keep buffering
0x00E9	0x2026      	CALL       _Soft_UART_Read
0x00EA	0x0839      	MOVF       FARG_Soft_UART_Read_Text_Buffer, 0
0x00EB	0x0084      	MOVWF      FSR
0x00EC	0x0850      	MOVF       R0, 0
0x00ED	0x0080      	MOVWF      INDF
0x00EE	0x0AB9      	INCF       FARG_Soft_UART_Read_Text_Buffer, 1
;Soft_Uart.c,84 :: 		}
0x00EF	0x28E2      	GOTO       L_Soft_UART_Read_Text22
L_Soft_UART_Read_Text23:
;Soft_Uart.c,85 :: 		*--Buffer = 0;                       // Put trailing zero to make it string
0x00F0	0x03B9      	DECF       FARG_Soft_UART_Read_Text_Buffer, 1
0x00F1	0x0839      	MOVF       FARG_Soft_UART_Read_Text_Buffer, 0
0x00F2	0x0084      	MOVWF      FSR
0x00F3	0x0180      	CLRF       INDF
;Soft_Uart.c,86 :: 		}
L_end_Soft_UART_Read_Text:
0x00F4	0x0008      	RETURN
; end of _Soft_UART_Read_Text
___CC2DW:
;__Lib_System.c,134 :: 		
;__Lib_System.c,137 :: 		
_CC2D_Loop1:
;__Lib_System.c,139 :: 		
0x00F5	0x2003      	CALL       _____DoICP
0x00F6	0x118A      	BCF        PCLATH, 3
0x00F7	0x120A      	BCF        PCLATH, 4
;__Lib_System.c,141 :: 		
0x00F8	0x0080      	MOVWF      INDF
;__Lib_System.c,142 :: 		
0x00F9	0x0A84      	INCF       FSR, 1
;__Lib_System.c,143 :: 		
0x00FA	0x0AA5      	INCF       ___DoICPAddr, 1
;__Lib_System.c,145 :: 		
0x00FB	0x1903      	BTFSC      STATUS, 2
;__Lib_System.c,146 :: 		
0x00FC	0x0AA6      	INCF       ___DoICPAddr+1, 1
;__Lib_System.c,147 :: 		
0x00FD	0x03D0      	DECF       R0, 1
;__Lib_System.c,149 :: 		
0x00FE	0x1D03      	BTFSS      STATUS, 2
;__Lib_System.c,150 :: 		
0x00FF	0x28F5      	GOTO       _CC2D_Loop1
;__Lib_System.c,152 :: 		
L_end___CC2DW:
0x0100	0x0008      	RETURN
; end of ___CC2DW
_main:
0x0101	0x300D      	MOVLW      13
0x0102	0x1283      	BCF        STATUS, 5
0x0103	0x00A0      	MOVWF      ?lstr5_main
0x0104	0x300A      	MOVLW      10
0x0105	0x00A1      	MOVWF      33
0x0106	0x300D      	MOVLW      13
0x0107	0x00A2      	MOVWF      34
0x0108	0x300A      	MOVLW      10
0x0109	0x00A3      	MOVWF      35
0x010A	0x01A4      	CLRF       36
;main.c,13 :: 		void main()
;main.c,15 :: 		OSCCAL  = 0x20;     // Load the calibration value of the internal oscillator
0x010B	0x3020      	MOVLW      32
0x010C	0x1683      	BSF        STATUS, 5
0x010D	0x0090      	MOVWF      OSCCAL
;main.c,16 :: 		ANSEL   = 0x00;     // Set ports as digital I/O, not analog input
0x010E	0x019F      	CLRF       ANSEL
;main.c,17 :: 		ADCON0  = 0x00;     // Shut off the A/D Converter
0x010F	0x1283      	BCF        STATUS, 5
0x0110	0x019F      	CLRF       ADCON0
;main.c,18 :: 		CMCON   = 0x07;     // Shut off the Comparator
0x0111	0x3007      	MOVLW      7
0x0112	0x0099      	MOVWF      CMCON
;main.c,19 :: 		VRCON   = 0x00;     // Shut off the Voltage Reference
0x0113	0x1683      	BSF        STATUS, 5
0x0114	0x0199      	CLRF       VRCON
;main.c,20 :: 		TRISIO  = 0x00;     // All Output
0x0115	0x0185      	CLRF       TRISIO
;main.c,21 :: 		GPIO    = 0x00;     // Make all Pin Low
0x0116	0x1283      	BCF        STATUS, 5
0x0117	0x0185      	CLRF       GPIO
;main.c,23 :: 		Delay_ms(500);
0x0118	0x3003      	MOVLW      3
0x0119	0x00DB      	MOVWF      R11
0x011A	0x308A      	MOVLW      138
0x011B	0x00DC      	MOVWF      R12
0x011C	0x3055      	MOVLW      85
0x011D	0x00DD      	MOVWF      R13
L_main0:
0x011E	0x0BDD      	DECFSZ     R13, 1
0x011F	0x291E      	GOTO       L_main0
0x0120	0x0BDC      	DECFSZ     R12, 1
0x0121	0x291E      	GOTO       L_main0
0x0122	0x0BDB      	DECFSZ     R11, 1
0x0123	0x291E      	GOTO       L_main0
0x0124	0x0000      	NOP
0x0125	0x0000      	NOP
;main.c,25 :: 		SoftUart_Init();                              // Initialize Serial Communication (9600 default)
0x0126	0x20C6      	CALL       _SoftUart_Init
;main.c,26 :: 		Soft_UART_Write_Text_Const("STARTING...");
0x0127	0x30F9      	MOVLW      ?lstr_1_main
0x0128	0x00B9      	MOVWF      FARG_Soft_UART_Write_Text_Const_Text
0x0129	0x3001      	MOVLW      hi_addr(?lstr_1_main)
0x012A	0x00BA      	MOVWF      FARG_Soft_UART_Write_Text_Const_Text+1
0x012B	0x206D      	CALL       _Soft_UART_Write_Text_Const
;main.c,27 :: 		Soft_UART_Write_Text_Const("\r\n\r\n");
0x012C	0x3021      	MOVLW      ?lstr_2_main
0x012D	0x00B9      	MOVWF      FARG_Soft_UART_Write_Text_Const_Text
0x012E	0x3002      	MOVLW      hi_addr(?lstr_2_main)
0x012F	0x00BA      	MOVWF      FARG_Soft_UART_Write_Text_Const_Text+1
0x0130	0x206D      	CALL       _Soft_UART_Write_Text_Const
;main.c,29 :: 		for (i = 'A'; i <= 'Z'; i++) {                // Send bytes from 'A' to 'Z'
0x0131	0x3041      	MOVLW      65
0x0132	0x00A9      	MOVWF      _i
L_main1:
0x0133	0x0829      	MOVF       _i, 0
0x0134	0x3C5A      	SUBLW      90
0x0135	0x1C03      	BTFSS      STATUS, 0
0x0136	0x2946      	GOTO       L_main2
;main.c,30 :: 		Soft_UART_Write(i);
0x0137	0x0829      	MOVF       _i, 0
0x0138	0x00BE      	MOVWF      FARG_Soft_UART_Write_Data
0x0139	0x2048      	CALL       _Soft_UART_Write
;main.c,31 :: 		Delay_ms(100);
0x013A	0x3082      	MOVLW      130
0x013B	0x00DC      	MOVWF      R12
0x013C	0x30DD      	MOVLW      221
0x013D	0x00DD      	MOVWF      R13
L_main4:
0x013E	0x0BDD      	DECFSZ     R13, 1
0x013F	0x293E      	GOTO       L_main4
0x0140	0x0BDC      	DECFSZ     R12, 1
0x0141	0x293E      	GOTO       L_main4
0x0142	0x0000      	NOP
0x0143	0x0000      	NOP
;main.c,29 :: 		for (i = 'A'; i <= 'Z'; i++) {                // Send bytes from 'A' to 'Z'
0x0144	0x0AA9      	INCF       _i, 1
;main.c,32 :: 		}
0x0145	0x2933      	GOTO       L_main1
L_main2:
;main.c,33 :: 		Soft_UART_Write_Text_Const("\r\n\r\n");
0x0146	0x3026      	MOVLW      ?lstr_3_main
0x0147	0x00B9      	MOVWF      FARG_Soft_UART_Write_Text_Const_Text
0x0148	0x3002      	MOVLW      hi_addr(?lstr_3_main)
0x0149	0x00BA      	MOVWF      FARG_Soft_UART_Write_Text_Const_Text+1
0x014A	0x206D      	CALL       _Soft_UART_Write_Text_Const
;main.c,36 :: 		while (1)
L_main5:
;main.c,39 :: 		Soft_UART_Write_Text_Const("Type message & press Enter: ");
0x014B	0x30C1      	MOVLW      ?lstr_4_main
0x014C	0x00B9      	MOVWF      FARG_Soft_UART_Write_Text_Const_Text
0x014D	0x3001      	MOVLW      hi_addr(?lstr_4_main)
0x014E	0x00BA      	MOVWF      FARG_Soft_UART_Write_Text_Const_Text+1
0x014F	0x206D      	CALL       _Soft_UART_Write_Text_Const
;main.c,40 :: 		Soft_UART_Read_Text(text, '\r\n');       // Read until the CR + LF arrives
0x0150	0x302A      	MOVLW      _text
0x0151	0x00B9      	MOVWF      FARG_Soft_UART_Read_Text_Buffer
0x0152	0x300D      	MOVLW      13
0x0153	0x00BA      	MOVWF      FARG_Soft_UART_Read_Text_StopChar
0x0154	0x20E2      	CALL       _Soft_UART_Read_Text
;main.c,41 :: 		Soft_UART_Write_text(text);              // Print text
0x0155	0x302A      	MOVLW      _text
0x0156	0x00B9      	MOVWF      FARG_Soft_UART_Write_Text_Text
0x0157	0x20D4      	CALL       _Soft_UART_Write_Text
;main.c,42 :: 		Soft_UART_Write_Text("\r\n\r\n");
0x0158	0x3020      	MOVLW      ?lstr5_main
0x0159	0x00B9      	MOVWF      FARG_Soft_UART_Write_Text_Text
0x015A	0x20D4      	CALL       _Soft_UART_Write_Text
;main.c,45 :: 		Soft_UART_Write_Text_Const("Waiting for a single input");
0x015B	0x30DE      	MOVLW      ?lstr_6_main
0x015C	0x00B9      	MOVWF      FARG_Soft_UART_Write_Text_Const_Text
0x015D	0x3001      	MOVLW      hi_addr(?lstr_6_main)
0x015E	0x00BA      	MOVWF      FARG_Soft_UART_Write_Text_Const_Text+1
0x015F	0x206D      	CALL       _Soft_UART_Write_Text_Const
;main.c,46 :: 		Soft_UART_Write_Text_Const("\r\n");     // Newline
0x0160	0x3030      	MOVLW      ?lstr_7_main
0x0161	0x00B9      	MOVWF      FARG_Soft_UART_Write_Text_Const_Text
0x0162	0x3002      	MOVLW      hi_addr(?lstr_7_main)
0x0163	0x00BA      	MOVWF      FARG_Soft_UART_Write_Text_Const_Text+1
0x0164	0x206D      	CALL       _Soft_UART_Write_Text_Const
;main.c,47 :: 		byte_read = Soft_UART_Read();           // Read data
0x0165	0x2026      	CALL       _Soft_UART_Read
0x0166	0x0850      	MOVF       R0, 0
0x0167	0x00A8      	MOVWF      _byte_read
;main.c,48 :: 		Soft_UART_Write_Text_Const("\r\n");     // Newline
0x0168	0x3033      	MOVLW      ?lstr_8_main
0x0169	0x00B9      	MOVWF      FARG_Soft_UART_Write_Text_Const_Text
0x016A	0x3002      	MOVLW      hi_addr(?lstr_8_main)
0x016B	0x00BA      	MOVWF      FARG_Soft_UART_Write_Text_Const_Text+1
0x016C	0x206D      	CALL       _Soft_UART_Write_Text_Const
;main.c,49 :: 		Soft_UART_Write_Text_Const("Input: ");
0x016D	0x300F      	MOVLW      ?lstr_9_main
0x016E	0x00B9      	MOVWF      FARG_Soft_UART_Write_Text_Const_Text
0x016F	0x3002      	MOVLW      hi_addr(?lstr_9_main)
0x0170	0x00BA      	MOVWF      FARG_Soft_UART_Write_Text_Const_Text+1
0x0171	0x206D      	CALL       _Soft_UART_Write_Text_Const
;main.c,50 :: 		Soft_UART_Write(byte_read);             // Print data
0x0172	0x0828      	MOVF       _byte_read, 0
0x0173	0x00BE      	MOVWF      FARG_Soft_UART_Write_Data
0x0174	0x2048      	CALL       _Soft_UART_Write
;main.c,51 :: 		Soft_UART_Write_Text_Const("\r\n\r\n");
0x0175	0x301C      	MOVLW      ?lstr_10_main
0x0176	0x00B9      	MOVWF      FARG_Soft_UART_Write_Text_Const_Text
0x0177	0x3002      	MOVLW      hi_addr(?lstr_10_main)
0x0178	0x00BA      	MOVWF      FARG_Soft_UART_Write_Text_Const_Text+1
0x0179	0x206D      	CALL       _Soft_UART_Write_Text_Const
;main.c,54 :: 		count++;
0x017A	0x0AA7      	INCF       _count, 1
;main.c,55 :: 		Soft_UART_Write_Text_Const("Counter: ");
0x017B	0x3005      	MOVLW      ?lstr_11_main
0x017C	0x00B9      	MOVWF      FARG_Soft_UART_Write_Text_Const_Text
0x017D	0x3002      	MOVLW      hi_addr(?lstr_11_main)
0x017E	0x00BA      	MOVWF      FARG_Soft_UART_Write_Text_Const_Text+1
0x017F	0x206D      	CALL       _Soft_UART_Write_Text_Const
;main.c,56 :: 		WordToStr(count, text);
0x0180	0x0827      	MOVF       _count, 0
0x0181	0x00B9      	MOVWF      FARG_WordToStr_input
0x0182	0x01BA      	CLRF       FARG_WordToStr_input+1
0x0183	0x302A      	MOVLW      _text
0x0184	0x00BB      	MOVWF      FARG_WordToStr_output
0x0185	0x2087      	CALL       _WordToStr
;main.c,57 :: 		Soft_UART_Write_text(text);
0x0186	0x302A      	MOVLW      _text
0x0187	0x00B9      	MOVWF      FARG_Soft_UART_Write_Text_Text
0x0188	0x20D4      	CALL       _Soft_UART_Write_Text
;main.c,58 :: 		Soft_UART_Write_Text_Const("\r\n\r\n");
0x0189	0x3017      	MOVLW      ?lstr_12_main
0x018A	0x00B9      	MOVWF      FARG_Soft_UART_Write_Text_Const_Text
0x018B	0x3002      	MOVLW      hi_addr(?lstr_12_main)
0x018C	0x00BA      	MOVWF      FARG_Soft_UART_Write_Text_Const_Text+1
0x018D	0x206D      	CALL       _Soft_UART_Write_Text_Const
;main.c,60 :: 		Soft_UART_Write_Text_Const("=============================");
0x018E	0x30A3      	MOVLW      ?lstr_13_main
0x018F	0x00B9      	MOVWF      FARG_Soft_UART_Write_Text_Const_Text
0x0190	0x3001      	MOVLW      hi_addr(?lstr_13_main)
0x0191	0x00BA      	MOVWF      FARG_Soft_UART_Write_Text_Const_Text+1
0x0192	0x206D      	CALL       _Soft_UART_Write_Text_Const
;main.c,61 :: 		Soft_UART_Write_Text_Const("\r\n\r\n");
0x0193	0x302B      	MOVLW      ?lstr_14_main
0x0194	0x00B9      	MOVWF      FARG_Soft_UART_Write_Text_Const_Text
0x0195	0x3002      	MOVLW      hi_addr(?lstr_14_main)
0x0196	0x00BA      	MOVWF      FARG_Soft_UART_Write_Text_Const_Text+1
0x0197	0x206D      	CALL       _Soft_UART_Write_Text_Const
;main.c,63 :: 		Delay_ms(20);
0x0198	0x301A      	MOVLW      26
0x0199	0x00DC      	MOVWF      R12
0x019A	0x30F8      	MOVLW      248
0x019B	0x00DD      	MOVWF      R13
L_main7:
0x019C	0x0BDD      	DECFSZ     R13, 1
0x019D	0x299C      	GOTO       L_main7
0x019E	0x0BDC      	DECFSZ     R12, 1
0x019F	0x299C      	GOTO       L_main7
0x01A0	0x0000      	NOP
;main.c,64 :: 		}
0x01A1	0x294B      	GOTO       L_main5
;main.c,65 :: 		}
L_end_main:
0x01A2	0x29A2      	GOTO       $+0
; end of _main
;main.c,0 :: ?lstr_13_main
0x01A3	0x343D ;?lstr_13_main+0
0x01A4	0x343D ;?lstr_13_main+1
0x01A5	0x343D ;?lstr_13_main+2
0x01A6	0x343D ;?lstr_13_main+3
0x01A7	0x343D ;?lstr_13_main+4
0x01A8	0x343D ;?lstr_13_main+5
0x01A9	0x343D ;?lstr_13_main+6
0x01AA	0x343D ;?lstr_13_main+7
0x01AB	0x343D ;?lstr_13_main+8
0x01AC	0x343D ;?lstr_13_main+9
0x01AD	0x343D ;?lstr_13_main+10
0x01AE	0x343D ;?lstr_13_main+11
0x01AF	0x343D ;?lstr_13_main+12
0x01B0	0x343D ;?lstr_13_main+13
0x01B1	0x343D ;?lstr_13_main+14
0x01B2	0x343D ;?lstr_13_main+15
0x01B3	0x343D ;?lstr_13_main+16
0x01B4	0x343D ;?lstr_13_main+17
0x01B5	0x343D ;?lstr_13_main+18
0x01B6	0x343D ;?lstr_13_main+19
0x01B7	0x343D ;?lstr_13_main+20
0x01B8	0x343D ;?lstr_13_main+21
0x01B9	0x343D ;?lstr_13_main+22
0x01BA	0x343D ;?lstr_13_main+23
0x01BB	0x343D ;?lstr_13_main+24
0x01BC	0x343D ;?lstr_13_main+25
0x01BD	0x343D ;?lstr_13_main+26
0x01BE	0x343D ;?lstr_13_main+27
0x01BF	0x343D ;?lstr_13_main+28
0x01C0	0x3400 ;?lstr_13_main+29
; end of ?lstr_13_main
;main.c,0 :: ?lstr_4_main
0x01C1	0x3454 ;?lstr_4_main+0
0x01C2	0x3479 ;?lstr_4_main+1
0x01C3	0x3470 ;?lstr_4_main+2
0x01C4	0x3465 ;?lstr_4_main+3
0x01C5	0x3420 ;?lstr_4_main+4
0x01C6	0x346D ;?lstr_4_main+5
0x01C7	0x3465 ;?lstr_4_main+6
0x01C8	0x3473 ;?lstr_4_main+7
0x01C9	0x3473 ;?lstr_4_main+8
0x01CA	0x3461 ;?lstr_4_main+9
0x01CB	0x3467 ;?lstr_4_main+10
0x01CC	0x3465 ;?lstr_4_main+11
0x01CD	0x3420 ;?lstr_4_main+12
0x01CE	0x3426 ;?lstr_4_main+13
0x01CF	0x3420 ;?lstr_4_main+14
0x01D0	0x3470 ;?lstr_4_main+15
0x01D1	0x3472 ;?lstr_4_main+16
0x01D2	0x3465 ;?lstr_4_main+17
0x01D3	0x3473 ;?lstr_4_main+18
0x01D4	0x3473 ;?lstr_4_main+19
0x01D5	0x3420 ;?lstr_4_main+20
0x01D6	0x3445 ;?lstr_4_main+21
0x01D7	0x346E ;?lstr_4_main+22
0x01D8	0x3474 ;?lstr_4_main+23
0x01D9	0x3465 ;?lstr_4_main+24
0x01DA	0x3472 ;?lstr_4_main+25
0x01DB	0x343A ;?lstr_4_main+26
0x01DC	0x3420 ;?lstr_4_main+27
0x01DD	0x3400 ;?lstr_4_main+28
; end of ?lstr_4_main
;main.c,0 :: ?lstr_6_main
0x01DE	0x3457 ;?lstr_6_main+0
0x01DF	0x3461 ;?lstr_6_main+1
0x01E0	0x3469 ;?lstr_6_main+2
0x01E1	0x3474 ;?lstr_6_main+3
0x01E2	0x3469 ;?lstr_6_main+4
0x01E3	0x346E ;?lstr_6_main+5
0x01E4	0x3467 ;?lstr_6_main+6
0x01E5	0x3420 ;?lstr_6_main+7
0x01E6	0x3466 ;?lstr_6_main+8
0x01E7	0x346F ;?lstr_6_main+9
0x01E8	0x3472 ;?lstr_6_main+10
0x01E9	0x3420 ;?lstr_6_main+11
0x01EA	0x3461 ;?lstr_6_main+12
0x01EB	0x3420 ;?lstr_6_main+13
0x01EC	0x3473 ;?lstr_6_main+14
0x01ED	0x3469 ;?lstr_6_main+15
0x01EE	0x346E ;?lstr_6_main+16
0x01EF	0x3467 ;?lstr_6_main+17
0x01F0	0x346C ;?lstr_6_main+18
0x01F1	0x3465 ;?lstr_6_main+19
0x01F2	0x3420 ;?lstr_6_main+20
0x01F3	0x3469 ;?lstr_6_main+21
0x01F4	0x346E ;?lstr_6_main+22
0x01F5	0x3470 ;?lstr_6_main+23
0x01F6	0x3475 ;?lstr_6_main+24
0x01F7	0x3474 ;?lstr_6_main+25
0x01F8	0x3400 ;?lstr_6_main+26
; end of ?lstr_6_main
;main.c,0 :: ?lstr_1_main
0x01F9	0x3453 ;?lstr_1_main+0
0x01FA	0x3454 ;?lstr_1_main+1
0x01FB	0x3441 ;?lstr_1_main+2
0x01FC	0x3452 ;?lstr_1_main+3
0x01FD	0x3454 ;?lstr_1_main+4
0x01FE	0x3449 ;?lstr_1_main+5
0x01FF	0x344E ;?lstr_1_main+6
0x0200	0x3447 ;?lstr_1_main+7
0x0201	0x342E ;?lstr_1_main+8
0x0202	0x342E ;?lstr_1_main+9
0x0203	0x342E ;?lstr_1_main+10
0x0204	0x3400 ;?lstr_1_main+11
; end of ?lstr_1_main
;main.c,0 :: ?lstr_11_main
0x0205	0x3443 ;?lstr_11_main+0
0x0206	0x346F ;?lstr_11_main+1
0x0207	0x3475 ;?lstr_11_main+2
0x0208	0x346E ;?lstr_11_main+3
0x0209	0x3474 ;?lstr_11_main+4
0x020A	0x3465 ;?lstr_11_main+5
0x020B	0x3472 ;?lstr_11_main+6
0x020C	0x343A ;?lstr_11_main+7
0x020D	0x3420 ;?lstr_11_main+8
0x020E	0x3400 ;?lstr_11_main+9
; end of ?lstr_11_main
;main.c,0 :: ?lstr_9_main
0x020F	0x3449 ;?lstr_9_main+0
0x0210	0x346E ;?lstr_9_main+1
0x0211	0x3470 ;?lstr_9_main+2
0x0212	0x3475 ;?lstr_9_main+3
0x0213	0x3474 ;?lstr_9_main+4
0x0214	0x343A ;?lstr_9_main+5
0x0215	0x3420 ;?lstr_9_main+6
0x0216	0x3400 ;?lstr_9_main+7
; end of ?lstr_9_main
;main.c,0 :: ?lstr_12_main
0x0217	0x340D ;?lstr_12_main+0
0x0218	0x340A ;?lstr_12_main+1
0x0219	0x340D ;?lstr_12_main+2
0x021A	0x340A ;?lstr_12_main+3
0x021B	0x3400 ;?lstr_12_main+4
; end of ?lstr_12_main
;main.c,0 :: ?lstr_10_main
0x021C	0x340D ;?lstr_10_main+0
0x021D	0x340A ;?lstr_10_main+1
0x021E	0x340D ;?lstr_10_main+2
0x021F	0x340A ;?lstr_10_main+3
0x0220	0x3400 ;?lstr_10_main+4
; end of ?lstr_10_main
;main.c,0 :: ?lstr_2_main
0x0221	0x340D ;?lstr_2_main+0
0x0222	0x340A ;?lstr_2_main+1
0x0223	0x340D ;?lstr_2_main+2
0x0224	0x340A ;?lstr_2_main+3
0x0225	0x3400 ;?lstr_2_main+4
; end of ?lstr_2_main
;main.c,0 :: ?lstr_3_main
0x0226	0x340D ;?lstr_3_main+0
0x0227	0x340A ;?lstr_3_main+1
0x0228	0x340D ;?lstr_3_main+2
0x0229	0x340A ;?lstr_3_main+3
0x022A	0x3400 ;?lstr_3_main+4
; end of ?lstr_3_main
;main.c,0 :: ?lstr_14_main
0x022B	0x340D ;?lstr_14_main+0
0x022C	0x340A ;?lstr_14_main+1
0x022D	0x340D ;?lstr_14_main+2
0x022E	0x340A ;?lstr_14_main+3
0x022F	0x3400 ;?lstr_14_main+4
; end of ?lstr_14_main
;main.c,0 :: ?lstr_7_main
0x0230	0x340D ;?lstr_7_main+0
0x0231	0x340A ;?lstr_7_main+1
0x0232	0x3400 ;?lstr_7_main+2
; end of ?lstr_7_main
;main.c,0 :: ?lstr_8_main
0x0233	0x340D ;?lstr_8_main+0
0x0234	0x340A ;?lstr_8_main+1
0x0235	0x3400 ;?lstr_8_main+2
; end of ?lstr_8_main
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x0003       [6]    _____DoICP
0x0009      [29]    _Div_16X16_U
0x0026      [34]    _Soft_UART_Read
0x0048      [37]    _Soft_UART_Write
0x006D      [26]    _Soft_UART_Write_Text_Const
0x0087      [63]    _WordToStr
0x00C6      [14]    _SoftUart_Init
0x00D4      [14]    _Soft_UART_Write_Text
0x00E2      [19]    _Soft_UART_Read_Text
0x00F5      [12]    ___CC2DW
0x0101     [162]    _main
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0000       [1]    INDF
0x0002       [1]    PCL
0x0003       [1]    STATUS
0x0004       [1]    FSR
0x0005       [0]    Soft_Uart_Tx
0x0005       [0]    Soft_Uart_Rx
0x0005       [1]    GPIO
0x000A       [1]    PCLATH
0x0019       [1]    CMCON
0x001F       [1]    ADCON0
0x0020       [5]    ?lstr5_main
0x0025       [2]    ___DoICPAddr
0x0027       [1]    _count
0x0028       [1]    _byte_read
0x0029       [1]    _i
0x002A      [15]    _text
0x0039       [1]    FARG_Soft_UART_Read_Text_Buffer
0x0039       [2]    FARG_WordToStr_input
0x0039       [1]    FARG_Soft_UART_Write_Text_Text
0x0039       [2]    FARG_Soft_UART_Write_Text_Const_Text
0x003A       [1]    FARG_Soft_UART_Read_Text_StopChar
0x003B       [1]    FARG_WordToStr_output
0x003C       [1]    WordToStr_len_L0
0x003D       [1]    FLOC__WordToStr
0x003E       [1]    FARG_Soft_UART_Write_Data
0x003E       [1]    Soft_UART_Read_Data_L0
0x0050       [1]    R0
0x0051       [1]    R1
0x0052       [1]    R2
0x0053       [1]    R3
0x0054       [1]    R4
0x0055       [1]    R5
0x0056       [1]    R6
0x0057       [1]    R7
0x0058       [1]    R8
0x0059       [1]    R9
0x005A       [1]    R10
0x005B       [1]    R11
0x005C       [1]    R12
0x005D       [1]    R13
0x005E       [1]    R14
0x005F       [1]    R15
0x0085       [1]    TRISIO
0x0085       [0]    Soft_Uart_Tx_Direction
0x0085       [0]    Soft_Uart_Rx_Direction
0x0090       [1]    OSCCAL
0x0099       [1]    VRCON
0x009F       [1]    ANSEL
//** Constants locations ** 
//ADDRESS    SIZE    CONSTANT
//----------------------------------------------
0x01A3      [30]    ?lstr_13_main
0x01C1      [29]    ?lstr_4_main
0x01DE      [27]    ?lstr_6_main
0x01F9      [12]    ?lstr_1_main
0x0205      [10]    ?lstr_11_main
0x020F       [8]    ?lstr_9_main
0x0217       [5]    ?lstr_12_main
0x021C       [5]    ?lstr_10_main
0x0221       [5]    ?lstr_2_main
0x0226       [5]    ?lstr_3_main
0x022B       [5]    ?lstr_14_main
0x0230       [3]    ?lstr_7_main
0x0233       [3]    ?lstr_8_main
